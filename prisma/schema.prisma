// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?

    username String? @unique

    image       String?
    accounts    Account[]
    sessions    Session[]
    // Product
    products    Product[]
    Comment     Comment[]
    Vote        Vote[]
    CommentVote CommentVote[]

    // Discussion
    Discussion            Discussion[]
    discussionComment     DiscussionComment[]
    discussionVote        DiscussionVote[]
    discussionCommentVote DiscussionCommentVote[]
}

model Product {
    id          String  @id @default(cuid())
    title       String
    tagLine     String
    description String  @db.Text
    websiteUrl  String
    twitterUrl  String?
    linkedinUrl String?
    category    String
    logoUrl     String
    slug        String

    owner   User   @relation(fields: [ownerId], references: [id])
    ownerId String

    productImages ProductImages[]

    comments Comment[]
    votes    Vote[]
}

model ProductImages {
    id    String @id @default(cuid())
    image String

    productId String
    product   Product @relation(fields: [productId], references: [id])
}

model Discussion {
    id        String   @id @default(cuid())
    title     String
    slug      String
    content   Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String

    comments DiscussionComment[]
    votes    DiscussionVote[]
}

model Comment {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    product   Product @relation(fields: [productId], references: [id])
    productId String

    replyToId String?
    replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies   Comment[] @relation("ReplyTo")

    votes     CommentVote[]
    commentId String?
}

model DiscussionComment {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    discussion   Discussion @relation(fields: [discussionId], references: [id])
    discussionId String

    replyToId String?
    replyTo   DiscussionComment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies   DiscussionComment[] @relation("ReplyTo")

    votes     DiscussionCommentVote[]
    commentId String?
}

enum VoteType {
    UP
    DOWN
}

//  Product Vote Model
model Vote {
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    product   Product  @relation(fields: [productId], references: [id])
    productId String
    type      VoteType

    @@id([userId, productId])
}

//  Comment Vote on product Model
model CommentVote {
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    comment   Comment  @relation(fields: [commentId], references: [id])
    commentId String
    type      VoteType

    @@id([userId, commentId])
}

//  Discussion Vote Model
model DiscussionVote {
    user         User       @relation(fields: [userId], references: [id])
    userId       String
    discussion   Discussion @relation(fields: [discussionId], references: [id])
    discussionId String
    type         VoteType

    @@id([userId, discussionId])
}

// Discussion comment votes
model DiscussionCommentVote {
    user                User              @relation(fields: [userId], references: [id])
    userId              String
    discussionComment   DiscussionComment @relation(fields: [discussionCommentId], references: [id])
    discussionCommentId String
    type                VoteType

    @@id([userId, discussionCommentId])
}
